{"cells":[{"cell_type":"markdown","metadata":{"id":"UdRyKR44dcNI"},"source":["<div class=\"markdown-google-sans\">\n","\n","## Data science\n","</div>\n","\n","With Colab you can harness the full power of popular Python libraries to analyze and visualize data. The code cell below uses **numpy** to generate some random data, and uses **matplotlib** to visualize it. To edit the code, just click the cell and start editing."]},{"cell_type":"markdown","metadata":{"id":"-Rh3-Vt9Nev9"},"source":["<div class=\"markdown-google-sans\">\n","\n","## More Resources\n","\n","### Working with Notebooks in Colab\n","\n","</div>\n","\n","- [Overview of Colab](/notebooks/basic_features_overview.ipynb)\n","- [Guide to Markdown](/notebooks/markdown_guide.ipynb)\n","- [Importing libraries and installing dependencies](/notebooks/snippets/importing_libraries.ipynb)\n","- [Saving and loading notebooks in GitHub](https://colab.research.google.com/github/googlecolab/colabtools/blob/main/notebooks/colab-github-demo.ipynb)\n","- [Interactive forms](/notebooks/forms.ipynb)\n","- [Interactive widgets](/notebooks/widgets.ipynb)\n","\n","<div class=\"markdown-google-sans\">\n","\n","<a name=\"working-with-data\"></a>\n","### Working with Data\n","</div>\n","\n","- [Loading data: Drive, Sheets, and Google Cloud Storage](/notebooks/io.ipynb)\n","- [Charts: visualizing data](/notebooks/charts.ipynb)\n","- [Getting started with BigQuery](/notebooks/bigquery.ipynb)\n","\n","<div class=\"markdown-google-sans\">\n","\n","### Machine Learning Crash Course\n","\n","<div>\n","\n","These are a few of the notebooks from Google's online Machine Learning course. See the [full course website](https://developers.google.com/machine-learning/crash-course/) for more.\n","- [Intro to Pandas DataFrame](https://colab.research.google.com/github/google/eng-edu/blob/main/ml/cc/exercises/pandas_dataframe_ultraquick_tutorial.ipynb)\n","- [Linear regression with tf.keras using synthetic data](https://colab.research.google.com/github/google/eng-edu/blob/main/ml/cc/exercises/linear_regression_with_synthetic_data.ipynb)\n","\n","<div class=\"markdown-google-sans\">\n","\n","<a name=\"using-accelerated-hardware\"></a>\n","### Using Accelerated Hardware\n","</div>\n","\n","- [TensorFlow with GPUs](/notebooks/gpu.ipynb)\n","- [TensorFlow with TPUs](/notebooks/tpu.ipynb)"]},{"cell_type":"markdown","metadata":{"id":"P-H6Lw1vyNNd"},"source":["<div class=\"markdown-google-sans\">\n","\n","<a name=\"machine-learning-examples\"></a>\n","\n","### Featured examples\n","\n","</div>\n","\n","- [NeMo Voice Swap](https://colab.research.google.com/github/NVIDIA/NeMo/blob/stable/tutorials/VoiceSwapSample.ipynb): Use Nvidia's NeMo conversational AI Toolkit to swap a voice in an audio fragment with a computer generated one.\n","\n","- [Retraining an Image Classifier](https://tensorflow.org/hub/tutorials/tf2_image_retraining): Build a Keras model on top of a pre-trained image classifier to distinguish flowers.\n","- [Text Classification](https://tensorflow.org/hub/tutorials/tf2_text_classification): Classify IMDB movie reviews as either *positive* or *negative*.\n","- [Style Transfer](https://tensorflow.org/hub/tutorials/tf2_arbitrary_image_stylization): Use deep learning to transfer style between images.\n","- [Multilingual Universal Sentence Encoder Q&A](https://tensorflow.org/hub/tutorials/retrieval_with_tf_hub_universal_encoder_qa): Use a machine learning model to answer questions from the SQuAD dataset.\n","- [Video Interpolation](https://tensorflow.org/hub/tutorials/tweening_conv3d): Predict what happened in a video between the first and the last frame.\n"]},{"cell_type":"code","source":["## BCB-22F-028 (Syed Muhammad Baqir)\n","##Task 1\n","\n","#Strings\n","\n","# Define a string\n","my_string = \"Hello, World!\"\n","\n","# Print the string\n","print(my_string)\n","\n","# Access characters in a string\n","print(my_string[0])  # Output: H\n","print(my_string[7])  # Output: W\n","\n","\n","print(my_string[0:5])\n","\n","\n","# String slicing\n","# Output: Hello\n"],"metadata":{"id":"Xxbiv56FmOPd","executionInfo":{"status":"ok","timestamp":1715195470690,"user_tz":0,"elapsed":500,"user":{"displayName":"","userId":""}},"outputId":"3e13c590-cd85-414a-e2aa-51758206d6dd","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, World!\n","H\n","W\n","Hello\n"]}]},{"cell_type":"code","source":["## Data Types\n","\n","# Integer\n","my_integer = 10\n","\n","# Float\n","my_float = 3.14\n","\n","# Boolean\n","my_boolean = True\n","\n","# List\n","my_list = [1, 2, 3, 4, 5]\n","\n","# Tuple\n","my_tuple = (1, 2, 3)\n","\n","# Dictionary\n","my_dict = {'a': 1, 'b': 2}\n","\n","# Set\n","my_set = {1, 2, 3}\n"],"metadata":{"id":"1PWh9mFGnpEV","executionInfo":{"status":"ok","timestamp":1715195563225,"user_tz":0,"elapsed":584,"user":{"displayName":"","userId":""}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["#Loops\n","\n","# For loop\n","for i in range(5):\n","    print(i)\n","\n","# While loop\n","counter = 0\n","while counter < 5:\n","    print(counter)\n","    counter += 1\n"],"metadata":{"id":"-USJdSsdn5n_","executionInfo":{"status":"ok","timestamp":1715195632959,"user_tz":0,"elapsed":416,"user":{"displayName":"","userId":""}},"outputId":"c3cc0d96-6489-40e8-ee30-1d3bb65a4ecb","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","1\n","2\n","3\n","4\n","0\n","1\n","2\n","3\n","4\n"]}]},{"cell_type":"code","source":["#IfElse Condition\n","\n","x = 10\n","if x > 5:\n","    print(\"x is greater than 5\")\n","else:\n","    print(\"x is less than or equal to 5\")\n","\n","# Nested if-else\n","y = 7\n","if y > 5:\n","    if y < 10:\n","        print(\"y is between 5 and 10\")\n","    else:\n","        print(\"y is greater than or equal to 10\")\n","else:\n","    print(\"y is less than or equal to 5\")\n"],"metadata":{"id":"NhM4ESvLoYDs","executionInfo":{"status":"ok","timestamp":1715195745928,"user_tz":0,"elapsed":433,"user":{"displayName":"","userId":""}},"outputId":"658fa33d-a490-453a-b09e-86c3f89e9de4","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["x is greater than 5\n","y is between 5 and 10\n"]}]},{"cell_type":"code","source":["##Funcations\n","\n","def greet(name):\n","    print(\"Hello, \" + name + \"!\")\n","\n","# Function call\n","greet(\"Alice\")\n"],"metadata":{"id":"gdJ_L3wwolbL","executionInfo":{"status":"ok","timestamp":1715195797396,"user_tz":0,"elapsed":500,"user":{"displayName":"","userId":""}},"outputId":"1b6c84de-ceff-4649-f028-7803c06bb88e","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, Alice!\n"]}]},{"cell_type":"code","source":["##Classes\n","\n","class Person:\n","    def __init__(self, name, age):\n","        self.name = name\n","        self.age = age\n","\n","    def display_info(self):\n","        print(\"Name:\", self.name)\n","        print(\"Age:\", self.age)\n","\n","# Creating an object of the class\n","person1 = Person(\"John\", 30)\n","\n","# Accessing attributes and calling methods\n","person1.display_info()\n","\n"],"metadata":{"id":"tl481IbFowJI","executionInfo":{"status":"ok","timestamp":1715195862531,"user_tz":0,"elapsed":24217,"user":{"displayName":"","userId":""}},"outputId":"c3a688ae-3074-4612-a987-552ba8139612","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Name: John\n","Age: 30\n"]}]}],"metadata":{"colab":{"name":"Welcome To Colab","provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1715196444342}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}